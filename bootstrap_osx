#!/usr/bin/env bash

RUBY_VERSION="2.5.3"

verbose=0

command_exists() {
  if [ -n "$1" ]; then # make sure we are checking something
    hash "$1" 2>/dev/null && return 0;
  fi

  return 1;
}

check_for() {
  if [ -n "$1" ]; then # make sure we are checking something
    [ $verbose -eq 1 ] && printf "Checking for '${2:-$1}'..."
    if command_exists "$1"; then
      [ $verbose -eq 1 ] && printf "Available!\n"
      return 0
    else
      [ $verbose -eq 1 ] && printf "Unavailable!\n"
    fi
  fi

  return 1
}

ask() {
  if [ -n "$1" ]; then
    read -p "$1 (y/n): " -n 1
    echo "";

    if [[ $REPLY =~ ^[Yy]$ ]]; then
      return 0;
    fi
  fi

  return 1;
}

should_install() {
  if [ -n "$1" ]; then
    if ! check_for "$1" "$2"
    then
      if ask "Do you want to install '${2:-$1}'?"; then
        printf "Installing ${2:-$1}...\n"
        return 0;
      fi
    fi
  fi

  return 1;
}

prefix_output() {
  $@ 2>&1 | sed "s/^/>> /"
}

show_help() {
  cat << EOF
Usage: ${0##*/} [-v]
Bootstrap a new OS X install with things like Homebrew, latest Ruby etc.
For dotfiles, run 'setup' instead.

    -v  Verbose mode. Show more console output.
EOF
}

# ========================
# Get command line options
# ========================

OPTIND=1
while getopts "hvf:" opt; do
  case "$opt" in
    h)
      show_help
      exit 0
      ;;
    v)
      verbose=1
      ;;
    '?')
      show_help >&2
      exit 1
      ;;
  esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

echo ""
echo "========================================"
echo "        Alright, let's boostrap.        "
echo "========================================"

# ========================
# Exit early if not on OSX
# ========================

if [[ "$(uname)" != 'Darwin' ]]; then
  if ! ask "Wait, it appears as though you are not running this on an OS X machine. Are you sure you want to continue?"; then
    exit 1;
  fi
fi

# ====================================
# Step 1: Install Homebrew
# ====================================

if should_install brew "Homebrew"; then
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# ====================================
# Step 2: Update Homebrew
# ====================================

if hash brew 2>/dev/null; then
  echo "Updating 'Homebrew'..."
  echo ""
  brew update && brew doctor
  echo ""
fi

# ====================================
# Step 2: Install ruby-build and rbenv
# ====================================

if should_install ruby-build; then
  echo ""
  brew install ruby-build
  echo ""
fi

if should_install rbenv; then
  echo ""
  brew install rbenv
  echo ""
fi

# ===============================================
# Step 3: Install the latest(ish) version of Ruby
# ===============================================

current_ruby_version=`ruby -v | cut -d ' ' -f 2`
if ask "Do you want to install Ruby $RUBY_VERSION (currently $current_ruby_version)?"; then
  echo ""
  rbenv install $RUBY_VERSION && rbenv global $RUBY_VERSION
  echo ""
fi

# =======================
# Step 4: Update RubyGems
# =======================

if ask "Do you want to update RubyGems (requires admin)?"; then
  sudo echo ""
  sudo gem update --system
  echo ""
fi

# =======================
# Step 5: Install Bundler
# =======================

if should_install bundler "Bundler"; then
  echo ""
  gem install bundler && rbenv rehash
  echo ""
fi

# =============================================
# Step 6: Install MacVim and replace system vim
# =============================================

if should_install mvim "MacVim"; then
  echo ""
  brew install macvim --override-system-vim
  echo ""
fi

# ==================================
# Step 7: Install some other goodies
# ==================================
if ask "Do you want to install other useful stuff (tmux, reattach-to-user-namespace, git)?"; then
  echo ""
  brew install git tmux reattach-to-user-namespace
  echo ""
fi

# ===================================
# Step 8: Help with installing iTerm2
# ===================================
[ $verbose -eq 1 ] && echo "Checking for 'iTerm2'..."
if [ ! -e ~/Library/Preferences/com.googlecode.iterm2.plist ]; then
  if ask "Would you like to download iTerm2?"; then
    echo ""
    if command_exists wget; then
      wget https://iterm2.com/downloads/stable/iTerm2_v2_0.zip
    elif command_exists curl; then
      curl -o iTerm2_v2_0.zip https://iterm2.com/downloads/stable/iTerm2_v2_0.zip
    fi
    echo ""
  fi

  echo "iTerm2 has been downloaded to the current folder. Please install it from there!"
fi
